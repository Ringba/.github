# This is a basic workflow to help you get started with Actions

name: Build Containers

# Controls when the action will run. 
on:
  
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # set aws credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # login to aws ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # extracts the branch name
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout files
        uses: actions/checkout@v2

      # looks for all files that should be checked
      - name: look for files
        id: get_files
        run: |
          files=""
          while IFS= read -r -d '' file
          do
            echo "${file}"
            files+="$file "
          done < <(find . -name values.production.yml -print0)
          echo "${files}"
          echo "::set-output name=FILES_TO_BUILD::${files}"


      - name: build-files
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          files="${{ steps.get_files.outputs.FILES_TO_BUILD }}"
          branch="${{ steps.extract_branch.outputs.branch }}"
          repoPrefix=${{ secrets.REPO_PREFIX }}

          branch=`echo $branch | awk '{ gsub(/\//,"-"); print }'`

          repositories=`aws ecr describe-repositories`

          for changed_file in $files; do
            echo "${changed_file}"

            name=`echo "${changed_file}" | awk 'BEGIN {FS = "/" } {f=NF-1} {print tolower($f)}'`
            folder=`echo "$(dirname "${changed_file}")" `
            version=`grep tag: ${changed_file} | awk 'BEGIN {FS = ":" }  {print tolower($NF)}' | awk '{ gsub(/ /,""); print }'`
            tag=$version

            if [ "$branch" != "master" ]
            then
                tag="${branch}-${tag}"
            fi

            echo "$repoPrefix/$name:$tag"

            if [ `echo "$repositories" | grep  $repoPrefix/${name} | wc | awk '{ print $1}'` == "0" ]
            then
              echo "creating repository"
              aws ecr create-repository --repository-name $repoPrefix/${name} --image-scanning-configuration scanOnPush=true
            fi

            images=`aws ecr list-images  --repository-name $repoPrefix/${name} `
            imageExists=`echo "$images" | grep $tag | wc | awk '{ print $1}'`
            
            if [ $imageExists == "0" ]
            then
              imageName=$ECR_REGISTRY/$repoPrefix/${name}

              echo "building repository $imageName"
              docker build --build-arg FEED_USERNAME=${{ secrets.FEED_USERNAME }} --build-arg FEED_ACCESSTOKEN=${{ secrets.FEED_TOKEN }} -t $imageName:$tag -t $imageName:latest -f ${folder}/Dockerfile .

              docker push $imageName:$tag

              if [ "$branch" == "master" ]
              then
                docker push $imageName:latest
              fi

            fi
           
          done